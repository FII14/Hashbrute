#!/usr/bin/env python3

import hashlib
import sys
import time
import threading
import itertools
from colorama import Fore

# Kode warna
r = Fore.LIGHTRED_EX
g = Fore.LIGHTGREEN_EX
c = Fore.LIGHTCYAN_EX
p = Fore.RESET
w = Fore.LIGHTWHITE_EX
y = Fore.LIGHTYELLOW_EX
b = Fore.LIGHTBLUE_EX

# Algoritma hash yang didukung
algoritma_hash = {
    "1": ("md5", hashlib.md5),
    "2": ("sha1", hashlib.sha1),
    "3": ("sha256", hashlib.sha256),
    "4": ("sha512", hashlib.sha512)
}

animation_delay = 0.1
stop_animation = False

def animate(hash_target):
    while not stop_animation:
        for c in itertools.cycle(['|', '/', '-', '\\']):
            if stop_animation:
                break
            sys.stdout.write(f"\r{w}[{y}*{w}] Sedang memecahkan kata sandi Hash: {hash_target} {p}\n")
            sys.stdout.flush()
            time.sleep(animation_delay)

def stop_animation_thread():
    global stop_animation
    time.sleep(2)
    stop_animation = True

print(f"""{c}
{y}     .-.      _______
{y}    ()``; |==|_______D   {r}'a63e07a8a2c9df821b398df3ce7609da'
{y}    / ('      [--|--]
{y}(  /  |       |  |  |
{y} \(_)_]]      |  |  |
{c}-----------------------------------------------------------

{w}                   Pemecah Password Hash
{w}                     Dibuat oleh FII14

{c}==========================================================={p}
{p}""")

print(f"{g}Algoritma hash yang didukung{w}:")
print("==========================")
for i, (algoritma, _) in algoritma_hash.items():
    print(f"[{y}{i}{w}] {algoritma}")
print(f"[{r}Q{w}] Keluar")

pilihan = input(f"\n[{b}#{w}] Masukkan nomor algoritma hash (1-4) atau 'Q' untuk keluar: ").strip()

if pilihan.upper() == 'Q':
    print(f"\n[{g}+{w}] Keluar dari program.")
    sys.exit(0)

try:
    algoritma, fungsi_hash = algoritma_hash[pilihan]
except KeyError:
    print(f"\n[{r}-{w}] Masukan tidak valid.")
    sys.exit(1)

hash_target = input(f"[{b}#{w}] Masukkan hash target: ").strip()
if len(hash_target) == 0:
    print(f"\n[{r}-{w}] Hash tidak valid.")
    sys.exit(1)

file_wordlist = input(f"[{b}#{w}] Masukkan path ke file wordlist: ").strip()

try:
    jumlah_seluruh_password = 0
    with open(file_wordlist, 'r', encoding='latin-1') as f:
        seluruh_password = f.readlines()
        jumlah_seluruh_password = len(seluruh_password)
        print(f"\n{w}[{y}*{w}] Menghitung jumlah password '{file_wordlist}{p}'")
        time.sleep(3)
        print(f"\r{w}[{g}+{w}] Jumlah password '{file_wordlist}': '{jumlah_seluruh_password}'{p}")
        time.sleep(3)

    print()
    password_ditemukan = False
    jumlah_password_dicoba = 0

    # Memulai animasi
    animation_thread = threading.Thread(target=animate, args=(hash_target,))
    animation_thread.start()

    for password in seluruh_password:
        jumlah_password_dicoba += 1
        password = password.strip()
        password_hash = fungsi_hash(password.encode()).hexdigest()
        if password_hash == hash_target:
            password_ditemukan = True
            # Menghentikan animasi
            stop_animation_thread()
            print(f"\n{c}==========================================================={p}")
            print(f"[{g}+{w}] Password ditemukan: '{password}'")
            print(f"{w}[{g}+{p}] Jumlah password yang dicoba: '{jumlah_password_dicoba}'{p}")
            print(f"{c}-----------------------------------------------------------{p}")
            break

    # Jika password tidak ditemukan, hentikan animasi
    if not password_ditemukan:
        stop_animation_thread()
        print(f"\n{c}==========================================================={p}")
        print(f"[{r}-{w}] Password tidak ditemukan dalam wordlist.")
        print(f"{w}[{r}-{p}] Jumlah password yang dicoba: '{jumlah_password_dicoba}'{p}")
        print(f"{c}-----------------------------------------------------------{p}")

except FileNotFoundError:
    print(f"\n[{r}-{w}] File wordlist tidak ditemukan.")
    sys.exit(1)
except IOError:
    print(f"\n[{r}-{w}] Kesalahan saat membaca file wordlist.")
    sys.exit(1)
