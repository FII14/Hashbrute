#!/usr/bin/env python

import hashlib
import os
import sys
import time
import threading
from colorama import Fore

# Kode warna
m = Fore.LIGHTRED_EX   # merah
h = Fore.LIGHTGREEN_EX # hijau
c = Fore.LIGHTCYAN_EX  # cyan
p = Fore.RESET         # putih
w = Fore.LIGHTWHITE_EX # putih terang
k = Fore.LIGHTYELLOW_EX # kuning
b = Fore.LIGHTBLUE_EX  # biru

# Algoritma hash yang didukung
algoritma_hash = {
    "1": ("md5", hashlib.md5),
    "2": ("sha1", hashlib.sha1),
    "3": ("sha256", hashlib.sha256),
    "4": ("sha512", hashlib.sha512)
}

animation_delay = 0
stop_animation = False

def animasi(hash_target):
    """
    Fungsi untuk menampilkan animasi saat memecahkan hash password.

    Args:
        hash_target (str): Hash target yang akan dipecahkan.
    """
    simbol = ['|', '/', '-', '\\']
    indeks_simbol = 0
    while not stop_animation:
        simbol_sekarang = simbol[indeks_simbol]
        sys.stdout.write(f"\r{w}[{k}*{w}] Sedang memecahkan hash password {simbol_sekarang}{p}")
        sys.stdout.flush()
        indeks_simbol = (indeks_simbol + 1) % len(simbol)
        time.sleep(animation_delay)

def hentikan_animasi():
    """
    Fungsi untuk menghentikan animasi.
    """
    global stop_animation
    time.sleep(0)
    stop_animation = True

def cek_hash(hash_target, algoritma):
    hash_panjang = len(hash_target)
    if algoritma == "md5" and hash_panjang != 32:
        return False
    elif algoritma == "sha1" and hash_panjang != 40:
        return False
    elif algoritma == "sha256" and hash_panjang != 64:
        return False
    elif algoritma == "sha512" and hash_panjang != 128:
        return False
    return True

def pemecah_hash_password():
    """
    Fungsi utama untuk memecahkan hash password.
    """
    if os.name == "nt":
        os.system("cls")
    else:
        os.system("clear")

    print(f"""{c}
{b}     .-.      _______
{b}    ()``; |==|_______D   {m}'a63e07a8a2c9df821b398df3ce7609da'
{b}    / ('      [--|--]
{b}(  /  |       |  |  |
{b} \\(_)_]]      |  |  |
{c}-----------------------------------------------------------
{w}
{w}                   Pemecah Hash Password
{w}                     Dibuat oleh FII14
{w}             https://github.com/FII14/hashbrute
{w}
{c}==========================================================={p}
{p}""")

    print(f"{h}Jenis algoritma hash yang didukung{w}:")
    print("=============================")
    for i, (algoritma, _) in algoritma_hash.items():
        print(f"[{k}{i}{w}] {algoritma}")
    print(f"[{m}K{w}] Keluar")

    pilihan = input(f"\n[{b}#{w}] Masukkan jenis algoritma hash [1/2/3/4] : ").strip()

    if pilihan.upper() == 'K':
        print(f"[{h}+{w}] Keluar dari program.")
        sys.exit(0)

    try:
        algoritma, fungsi_hash = algoritma_hash[pilihan]
    except KeyError:
        print(f"[{m}-{w}] Jenis algoritma hash tidak ada.")
        sys.exit(1)

    hash_target = input(f"[{b}#{w}] Masukkan hash password: ").strip()

    if not cek_hash(hash_target, algoritma):
        print(f"[{m}-{w}] Hash password tidak valid.")
        sys.exit(1)

    file_wordlist = input(f"[{b}#{w}] Masukkan path ke file wordlist: ").strip()

    try:
        jumlah_seluruh_password = 0
        with open(file_wordlist, 'r', encoding='latin-1', errors='ignore') as f:
            seluruh_password = f.readlines()
            jumlah_seluruh_password = len(seluruh_password)
            print(f"\n{w}[{k}*{w}] Menghitung jumlah password wordlist {file_wordlist}{p}")
            time.sleep(3)
            print(f"{w}[{h}+{w}] Jumlah password wordlist {file_wordlist}: {jumlah_seluruh_password}{p}")
            time.sleep(3)

        print()
        password_ditemukan = False
        jumlah_password_dicoba = 0

        # Memulai animasi
        thread_animasi = threading.Thread(target=animasi, args=(hash_target,))
        thread_animasi.start()

        for password in seluruh_password:
            jumlah_password_dicoba += 1
            password = password.strip()
            password_hash = fungsi_hash(password.encode('utf-8')).hexdigest()
            if password_hash == hash_target:
                password_ditemukan = True
                # Menghentikan animasi
                hentikan_animasi()
                print(f"\n\n{c}==========================================================={p}")
                print(f"{w}[{h}+{w}] Password ditemukan: {password}{p}")
                print(f"{w}[{h}+{w}] Jenis hash: {algoritma}{p}")
                print(f"{w}[{h}+{w}] Hash password: {hash_target}{p}")
                print(f"{w}[{h}+{p}] Jumlah password yang dicoba: {jumlah_password_dicoba}{p}")
                print(f"{c}-----------------------------------------------------------{p}")
                break

        # Jika password tidak ditemukan, hentikan animasi
        if not password_ditemukan:
            hentikan_animasi()
            print(f"\n\n{c}==========================================================={p}")
            print(f"{w}[{m}-{w}] Password tidak ditemukan dalam wordlist.{p}")
            print(f"{w}[{m}-{w}] Jenis hash: {algoritma}{p}")
            print(f"{w}[{m}-{w}] Hash password: {hash_target}{p}")
            print(f"{w}[{m}-{w}] Jumlah password yang dicoba: {jumlah_password_dicoba}{p}")
            print(f"{c}-----------------------------------------------------------{p}")

    except FileNotFoundError:
        print(f"{w}[{m}-{w}] File wordlist tidak ditemukan.")
        sys.exit(1)
    except IOError:
        print(f"{w}[{m}-{w}] Kesalahan saat membaca file wordlist.")
        sys.exit(1)

try:
    # Memanggil fungsi utama
    pemecah_hash_password()
except KeyboardInterrupt:
    print(f"\n{w}[{m}-{w}] Keluar dari program {p}")
    hentikan_animasi()
    sys.exit(0)
